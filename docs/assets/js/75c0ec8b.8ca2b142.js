"use strict";(self.webpackChunkpoiji_documentation=self.webpackChunkpoiji_documentation||[]).push([[566],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(n),u=l,g=d["".concat(p,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5747:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),o=["components"],r={sidebar_position:1},p="Annotations",s={unversionedId:"features/Annotations",id:"features/Annotations",title:"Annotations",description:"Create your object model:",source:"@site/docs/features/Annotations.md",sourceDirName:"features",slug:"/features/Annotations",permalink:"/poiji/docs/features/Annotations",editUrl:"https://github.com/ozlerhakan/poiji-documentation/edit/main/docs/features/Annotations.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Poiji Structure",permalink:"/poiji/docs/structure"},next:{title:"Prefer Default Values",permalink:"/poiji/docs/features/Prefer Default Values"}},m=[{value:"ExcelCellName",id:"excelcellname",children:[],level:2},{value:"ExcelCellRange",id:"excelcellrange",children:[],level:2}],c={toc:m};function d(e){var t=e.components,r=(0,l.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"annotations"},"Annotations"),(0,i.kt)("p",null,"Create your object model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Employee {\n\n    @ExcelRow                    <1>\n    private int rowIndex;\n\n    @ExcelCell(0)                <2>\n    private long employeeId;     <3>\n\n    @ExcelCell(1)\n    private String name;\n\n    @ExcelCell(2)\n    private String surname;\n\n    @ExcelCell(3)\n    private int age;\n\n    @ExcelCell(4)\n    private boolean single;\n\n    @ExcelCellName("emails")     <4>\n    List<String> emails;\n\n    @ExcelCell(5)\n    List<BigDecimal> bills;\n\n    //no need getters/setters to map excel cells to fields\n}\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Optionally, we can access the index of each row item by using the ",(0,i.kt)("inlineCode",{parentName:"li"},"ExcelRow")," annotation. Annotated variable should be of type ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"double"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"long"),"."),(0,i.kt)("li",{parentName:"ol"},"A field must be annotated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@ExcelCell")," along with its property in order to get the value from the right coordinate in the target excel sheet."),(0,i.kt)("li",{parentName:"ol"},"An annotated field can be either protected, private or public modifier. The field may be either of ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"double"),", or their wrapper classes. You can add a field of ",(0,i.kt)("inlineCode",{parentName:"li"},"java.util.Date"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.time.LocalDate"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.time.LocalDateTime")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," as well."),(0,i.kt)("li",{parentName:"ol"},"If one column contains multiple value, you can get them using a List field. A List field can store items which is of type ",(0,i.kt)("inlineCode",{parentName:"li"},"BigDecimal"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Double"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Integer"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),".")),(0,i.kt)("p",null,"This is the excel file (",(0,i.kt)("inlineCode",{parentName:"p"},"employees.xlsx"),") we want to map to a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"Employee")," instance:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"ID"),(0,i.kt)("th",{parentName:"tr",align:null},"NAME"),(0,i.kt)("th",{parentName:"tr",align:null},"SURNAME"),(0,i.kt)("th",{parentName:"tr",align:null},"AGE"),(0,i.kt)("th",{parentName:"tr",align:null},"SINGLE"),(0,i.kt)("th",{parentName:"tr",align:null},"BILLS"),(0,i.kt)("th",{parentName:"tr",align:null},"EMAILS"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"123923"),(0,i.kt)("td",{parentName:"tr",align:null},"Joe"),(0,i.kt)("td",{parentName:"tr",align:null},"Doe"),(0,i.kt)("td",{parentName:"tr",align:null},"30"),(0,i.kt)("td",{parentName:"tr",align:null},"TRUE"),(0,i.kt)("td",{parentName:"tr",align:null},"123,10;99.99"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:joe@doe.com"},"joe@doe.com"),";",(0,i.kt)("a",{parentName:"td",href:"mailto:joedoe@gmail.com"},"joedoe@gmail.com"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"123123"),(0,i.kt)("td",{parentName:"tr",align:null},"Sophie"),(0,i.kt)("td",{parentName:"tr",align:null},"Derue"),(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"TRUE"),(0,i.kt)("td",{parentName:"tr",align:null},"1022"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:sophie.derue@gmail.com"},"sophie.derue@gmail.com"),";",(0,i.kt)("a",{parentName:"td",href:"mailto:sophie@derue.com"},"sophie@derue.com"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"135923"),(0,i.kt)("td",{parentName:"tr",align:null},"Paul"),(0,i.kt)("td",{parentName:"tr",align:null},"Raul"),(0,i.kt)("td",{parentName:"tr",align:null},"31"),(0,i.kt)("td",{parentName:"tr",align:null},"FALSE"),(0,i.kt)("td",{parentName:"tr",align:null},"73,25;70"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:paul.raul@gmail.com"},"paul.raul@gmail.com"),";",(0,i.kt)("a",{parentName:"td",href:"mailto:paul@raul.com"},"paul@raul.com"))))),(0,i.kt)("p",null,"The snippet below shows how to obtain the excel data using ",(0,i.kt)("inlineCode",{parentName:"p"},"Poiji"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'PoijiOptions options = PoijiOptions.PoijiOptionsBuilder.settings()\n        .addListDelimiter(";") <1>\n        .build();\nList<Employee> employees = Poiji.fromExcel(new File("employees.xls"), Employee.class, options);\n// alternatively\nInputStream stream = new FileInputStream(new File("employees.xls"))\nList<Employee> employees = Poiji.fromExcel(stream, PoijiExcelType.XLS, Employee.class, options);\n\nemployees.size();\n// 3\nEmployee firstEmployee = employees.get(0);\n// Employee{rowIndex=1, employeeId=123923, name=\'Joe\', surname=\'Doe\', age=30, single=true, emails=[joe@doe.com, joedoe@gmail.com], biils=[123,10, 99.99]}\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"By default the delimiter/separator is ",(0,i.kt)("inlineCode",{parentName:"li"},",")," to split items in a cell. There is an option to change this behavior. Since we use ",(0,i.kt)("inlineCode",{parentName:"li"},";")," between items, we need to tell Poiji to use ",(0,i.kt)("inlineCode",{parentName:"li"},";")," as a separator.")),(0,i.kt)("p",null,"By default, Poiji ignores the header row of the excel data. If you want to ignore the first row of data, you need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"PoijiOptions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"PoijiOptions options = PoijiOptionsBuilder.settings(1).build(); // we eliminate Joe Doe.\nList<Employee> employees = Poiji.fromExcel(new File(\"employees.xls\"), Employee.class, options);\nEmployee firstEmployee = employees.get(0);\n// Employee{rowIndex=2, employeeId=123123, name='Sophie', surname='Derue', age=20, single=true, emails=[sophie.derue@gmail.com, sophie@derue.com], biils=[1022]}\n")),(0,i.kt)("p",null,"By default, Poiji selects the first sheet of an excel file. You can override this behaviour like below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"PoijiOptions options = PoijiOptionsBuilder.settings()\n                       .sheetIndex(1) <1>\n                       .build();\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Poiji should look at the second (zero-based index) sheet of your excel file.")),(0,i.kt)("h2",{id:"excelcellname"},"ExcelCellName"),(0,i.kt)("p",null,"Using ExcelCellName, we can read the values by column names directly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Person {\n\n    @ExcelCellName("Name")  (1)\n    protected String name;\n\n    @ExcelCellName("Address")\n    protected String address;\n\n    @ExcelCellName("Age")\n    protected int age;\n\n    @ExcelCellName("Email")\n    protected String email;\n\n}\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We need to specify the name of the column for which the corresponding value is looked. By default, ",(0,i.kt)("inlineCode",{parentName:"li"},"@ExcelCellName")," is case-sensitive and the excel file should\u2019t contain duplicated column names. However, you can manipulate this feature using ",(0,i.kt)("inlineCode",{parentName:"li"},"PoijiOptionsBuilder#caseInsensitive(boolean)")," and you can ignore white spaces using ",(0,i.kt)("inlineCode",{parentName:"li"},"PoijiOptionsBuilder#ignoreWhitespaces(boolean)"),".")),(0,i.kt)("p",null,"For example, here is the excel (",(0,i.kt)("inlineCode",{parentName:"p"},"person.xls"),") file we want to use:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Address"),(0,i.kt)("th",{parentName:"tr",align:null},"Age"),(0,i.kt)("th",{parentName:"tr",align:null},"Email"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Joe"),(0,i.kt)("td",{parentName:"tr",align:null},"San Francisco, CA"),(0,i.kt)("td",{parentName:"tr",align:null},"30"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:joe@doe.com"},"joe@doe.com"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Sophie"),(0,i.kt)("td",{parentName:"tr",align:null},"Costa Mesa, CA"),(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:sophie@doe.com"},"sophie@doe.com"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'List<Person> people = Poiji.fromExcel(new File("person.xls"), Person.class);\npeople.size();\n// 2\nPerson person = people.get(0);\n// Joe\n// San Francisco, CA\n// 30\n// joe@doe.com\n')),(0,i.kt)("p",null,"Given that the first column always stands for the names of people, you\u2019re able to combine the ExcelCell annotation with ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelCellName"),"  in your object model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Person {\n\n    @ExcelCell(0)\n    protected String name;\n\n    @ExcelCellName("Address")\n    protected String address;\n\n    @ExcelCellName("Age")\n    protected int age;\n\n    @ExcelCellName("Email")\n    protected String email;\n\n}\n')),(0,i.kt)("h2",{id:"excelcellrange"},"ExcelCellRange"),(0,i.kt)("p",null,"Consider you have a table like below:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"range annoration",src:n(1897).Z})),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelCellRange")," annotation lets us aggregate a range of information in one object model. In this case, we collect the data in ",(0,i.kt)("inlineCode",{parentName:"p"},"PersonCreditInfo")," plus details of the person in ",(0,i.kt)("inlineCode",{parentName:"p"},"PersonInfo")," and for the credit card in ",(0,i.kt)("inlineCode",{parentName:"p"},"CardInfo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class PersonCreditInfo {\n\n    @ExcelCellName("No.")\n    private Integer no;\n\n    @ExcelCellRange\n    private PersonInfo personInfo;\n\n    @ExcelCellRange\n    private CardInfo cardInfo;\n\n    public static class PersonInfo {\n        @ExcelCellName("Name")\n        private String name;\n        @ExcelCellName("Age")\n        private Integer age;\n        @ExcelCellName("City")\n        private String city;\n        @ExcelCellName("State")\n        private String state;\n        @ExcelCellName("Zip Code")\n        private String zipCode;\n    }\n\n    public static class CardInfo {\n        @ExcelCellName("Card Type")\n        private String type;\n        @ExcelCellName("Last 4 Digits")\n        private String last4Digits;\n        @ExcelCellName("Expiration Date")\n        private String expirationDate;\n    }\n}\n')),(0,i.kt)("p",null,"Using the conventional way, we can retrieve the data using ",(0,i.kt)("inlineCode",{parentName:"p"},"Poiji.fromExcel"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"PoijiOptions options = PoijiOptions.PoijiOptionsBuilder.settings().headerCount(2).build();\nList<PersonCreditInfo> actualPersonalCredits = Poiji.fromExcel(new File(path), PersonCreditInfo.class, options);\n\nPersonCreditInfo personCreditInfo1 = actualPersonalCredits.get(0);\nPersonCreditInfo.PersonInfo expectedPerson1 = personCreditInfo1.getPersonInfo();\nPersonCreditInfo.CardInfo expectedCard1 = personCreditInfo1.getCardInfo();\n")))}d.isMDXComponent=!0},1897:function(e,t,n){t.Z=n.p+"assets/images/poiji-excel-range-f7ae01d900b483be97646b7e8b296351.png"}}]);