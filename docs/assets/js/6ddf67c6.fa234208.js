"use strict";(self.webpackChunkpoiji_documentation=self.webpackChunkpoiji_documentation||[]).push([[896],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=o,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||a;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1151:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={sidebar_position:10},s="Debug Cells",c={unversionedId:"features/Debug Cells Formats",id:"features/Debug Cells Formats",title:"Debug Cells",description:"We can observe each cell format of a given excel file. Assume that we have an excel file like below:",source:"@site/docs/features/Debug Cells Formats.md",sourceDirName:"features",slug:"/features/Debug Cells Formats",permalink:"/poiji/docs/features/Debug Cells Formats",editUrl:"https://github.com/ozlerhakan/poiji-documentation/edit/main/docs/features/Debug Cells Formats.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Mandatory Columns",permalink:"/poiji/docs/features/Mandatory Columns"},next:{title:"Modify Cell Format",permalink:"/poiji/docs/features/Modify Cells Formats"}},u=[],p={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"debug-cells"},"Debug Cells"),(0,a.kt)("p",null,"We can observe each cell format of a given excel file. Assume that we have an excel file like below:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Date"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"12/31/2020 12.00 AM")))),(0,a.kt)("p",null,"We can get all the list of cell formats using ",(0,a.kt)("inlineCode",{parentName:"p"},"PoijiLogCellFormat")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"PoijiOptions"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"PoijiLogCellFormat log = new PoijiLogCellFormat();\nPoijiOptions options = PoijiOptions.PoijiOptionsBuilder.settings()\n        .poijiCellFormat(log)\n        .build();\nList<Model> dates = Poiji.fromExcel(stream, poijiExcelType, Model.class, options);\n\nModel model = rows.get(0)\nmodel.getDate();\n// 12.00\n")),(0,a.kt)("p",null,"Hmm, It looks like we did not achieve the correct date format since we get the date value as (",(0,a.kt)("inlineCode",{parentName:"p"},"12.00"),"). Let's see how internally the excel file is being parsed via ",(0,a.kt)("inlineCode",{parentName:"p"},"PoijiLogCellFormat"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"List<InternalCellFormat> formats = log.formats();\nInternalCellFormat cell10 = formats.get(1);\n\ncell10.getFormatString()\n// mm:ss.0\ncell10.getFormatIndex()\n// 47\n")),(0,a.kt)("p",null,"Now that we know the reason of why we don't see the expected date value, it's because the default format of the date cell is the ",(0,a.kt)("inlineCode",{parentName:"p"},"mm:ss.0")," format with a given index 47, we need to change the default format of index (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"47"),"). This format was automatically assigned to the cell having a number, but almost certainly with a special style or format. Note that this option should be used for debugging purpose only."))}m.isMDXComponent=!0}}]);